@page "/"
@rendermode InteractiveServer
@inject ChatService ChatService
@inject ILogger<Home> Logger
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions

<PageTitle>Knowledge Base</PageTitle>

<FluentCard
    Style="padding: 20px; max-width: 800px; margin: 40px 0 40px 20px; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0,0,0,0.1); text-align: left;">
    <h2
        style="color: #0078D4; display: flex; align-items: center; justify-content: center; gap: 8px; margin-bottom: 20px;">
        <FluentIcon Value="@(new Icons.Regular.Size28.SearchSparkle())" Color="@Color.Accent" />
        Knowledge Base Search - SEC
    </h2>
    @if (Submitting)
    {
        <!-- Loading State -->
        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
        <FluentLabel Typo="Typography.Body" Style="font-size: 16px; color: #555;">Please wait...</FluentLabel>
        <FluentProgress Style="width: 100%; max-width: 300px; margin: 20px 0;" />
        <div id="currentLineContainer"
            style="margin-top: 20px; padding: 15px; border: 1px solid var(--neutral-outline-rest); background-color: var(--neutral-fill-rest); font-size: 16px; border-radius: 8px;">
            <strong style="color: #0078D4;">@CurrentLine</strong>
        </div>
    </FluentStack>
    }
    else
    {
        <!-- Input Section -->
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="2"
        Style="padding: 20px; border: 1px solid var(--neutral-outline-rest); border-radius: 8px; background-color: var(--neutral-fill-rest); text-align: center;">
        <div class="textarea-container" style="width: 100%;">
            <textarea @bind="PromptText" @oninput="HandleInput" placeholder="Enter your prompt..." maxlength="500"
                id="animatedTextarea"
                style="width: 100%; padding: 12px; font-size: 16px; border: 1px solid #ccc; border-radius: 8px; resize: vertical; transition: border-color 0.3s ease;">
                </textarea>
            <div class="char-counter" style="text-align: right; font-size: 14px; color: #555; margin-top: 5px;">
                @($"{PromptText.Length}/500 characters")
            </div>
        </div>

        <!-- Submit Button -->
        <FluentButton IconStart="@(new Icons.Filled.Size32.ArrowCircleUp())" Appearance="Appearance.Accent"
            @onclick="FetchCompletion" disabled="@IsButtonDisabled" Style="margin: 15px auto; display: block;">
            Submit
        </FluentButton>
    </FluentStack>
    }

    <!-- Finalized Results Section -->
    @if (FinalizedGroups.Any())
    {
        <FluentCard
            Style="padding: 20px; max-width: 900px; margin: 40px auto; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0,0,0,0.1);">
            <div style="max-height: 400px; overflow-y: auto; padding: 10px;">
                <FluentAccordion>
                    @foreach (var (title, contentLines) in FinalizedGroups)
                    {
                        <FluentAccordionItem Heading="@title">
                            <FluentIcon Value="@(new Icons.Regular.Size20.DocumentOnePageSparkle())" Color="@Color.Neutral"
                                Slot="start" />
                            @foreach (var content in contentLines)
                            {
                                <div
                                    style="margin-bottom: 15px; padding: 10px; border: 1px solid var(--neutral-outline-hover); border-radius: 8px; background-color: var(--neutral-fill-rest); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); font-size: 14px; line-height: 1.5; text-align: left;">
                                    @(new MarkupString(ParseLineToStyledHtml(content)))
                                </div>
                            }
                        </FluentAccordionItem>
                    }
                </FluentAccordion>
            </div>
        </FluentCard>
    }

</FluentCard>

@code {
    private string TenantId = "1234";
    private string UserId = "5678";
    private string CategoryId = "Document";
    private string PromptText = string.Empty;
    private double SimilarityScore = 0.7;

    private List<(string Title, List<string> ContentLines)> FinalizedGroups = new();
    private string CurrentLine = string.Empty;
    private bool Submitting = false;
    private string CurrentTitle = "Untitled";

    private bool IsButtonDisabled => string.IsNullOrEmpty(PromptText) || PromptText.Length < 10;

    protected override void OnInitialized()
    {
        ChatService.StatusUpdated += async (message) => await OnStatusUpdated(message);
    }

    private async Task OnStatusUpdated(string message)
    {
        Logger.LogInformation($"OnStatusUpdated received message: {message}");

        if (message.StartsWith("Finalized Line:"))
        {
            // Extract the finalized line (e.g., content)
            var finalizedLine = message.Replace("Finalized Line:", "").Trim();

            // Check if the finalized line contains a new title
            if (finalizedLine.StartsWith("**Title**:"))
            {
                // Extract the new title
                var match = Regex.Match(finalizedLine, @"\*\*Title\*\*: (.*?)\n");
                if (match.Success)
                {
                    CurrentTitle = match.Groups[1].Value.Trim();

                    // Add a new group for the new title
                    FinalizedGroups.Add((CurrentTitle, new List<string>()));
                }
            }
            else
            {
                // Add the content line to the most recent group
                if (FinalizedGroups.Any())
                {
                    FinalizedGroups.Last().ContentLines.Add(finalizedLine);
                }
                else
                {
                    // If no group exists, create one with the default title
                    FinalizedGroups.Add((CurrentTitle, new List<string> { finalizedLine }));
                }
            }

            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "statusMessagesContainer");
        }
        else
        {
            // Handle streaming lines
            CurrentLine = message.Trim();
            StateHasChanged();
        }
    }

    private async Task FetchCompletion(MouseEventArgs e)
    {
        if (IsButtonDisabled)
        {
            Logger.LogWarning("PromptText is empty or too short.");
            return;
        }

        Submitting = true;
        FinalizedGroups.Clear();
        CurrentLine = string.Empty;

        try
        {
            // Fetch completion and title from the service
            var (completion, title) = await ChatService.GetKnowledgeBaseStreamingCompletionAsync(
            TenantId, UserId, CategoryId, PromptText, SimilarityScore);

            // Add the final title and completion
            //FinalizedGroups.Add((title, new List<string> { completion }));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching completion");
            FinalizedGroups.Add(("Error", new List<string> { "An error occurred while fetching the completion." }));
        }
        finally
        {
            Submitting = false;
        }
    }

    private string ParseLineToStyledHtml(string line)
    {
        line = Regex.Replace(line, @"\*\*Title\*\*: (.*?)\n",
        @"<h4 style='color: #0078D4; font-size: 18px;'><strong>Title:</strong> $1</h4>");

        line = line.Replace("**Content Summary**:",
        "<h5 style='color: #555; font-size: 16px;'><strong>Content Summary:</strong></h5>")
        .Replace("Reference Link:",
        "<h5 style='color: #555; font-size: 16px;'><strong>Reference Link:</strong></h5>");

        line = Regex.Replace(line, @"\[(.*?)\]\((.*?)\)",
        @"<a href='$2' target='_blank' style='color: #0078D4;'>$1</a>");

        return line.Replace("\n", "<p style='margin: 5px 0;'>");
    }

    private async void HandleInput(ChangeEventArgs e)
    {
        PromptText = e.Value?.ToString() ?? string.Empty;
        await JSRuntime.InvokeVoidAsync("adjustTextAreaHeight", "animatedTextarea");
        StateHasChanged();
    }
}
